-e 
# === File: ./test_serializers.py ===
import pytest
from decimal import Decimal
from apps.cart.serializers import (
    CartSerializer,
    CartItemSerializer,
    AddToCartSerializer,
    CartItemUpdateSerializer,
)
from apps.cart.models import Cart, CartItem


@pytest.mark.django_db
class TestSerializers:
    def test_cart_serializer(self, user, product):
        cart = Cart.objects.create(user=user)
        CartItem.objects.create(cart=cart, product=product, quantity=2)
        serializer = CartSerializer(cart)
        assert serializer.data["id"] == str(cart.id)
        assert len(serializer.data["items"]) == 1
        assert serializer.data["total"] == str(product.actual_price * Decimal("2"))

    def test_cart_item_serializer(self, product):
        cart = Cart.objects.create(session_key="test_session_key")
        item = CartItem.objects.create(cart=cart, product=product, quantity=2)
        serializer = CartItemSerializer(item)
        assert serializer.data["quantity"] == 2
        assert serializer.data["total_price"] == str(
            product.actual_price * Decimal("2")
        )
        assert serializer.data["is_available"] is True

    def test_add_to_cart_serializer_valid(self, product):
        data = {"product_id": str(product.id), "quantity": 3}
        serializer = AddToCartSerializer(data=data)
        assert serializer.is_valid()
        assert serializer.validated_data["quantity"] == 3

    def test_add_to_cart_serializer_insufficient_stock(self, product):
        data = {"product_id": str(product.id), "quantity": 6}
        serializer = AddToCartSerializer(data=data)
        assert not serializer.is_valid()
        assert "Недостаточно товара" in str(serializer.errors)

    def test_cart_item_update_serializer_valid(self):
        data = {"quantity": 3}
        serializer = CartItemUpdateSerializer(data=data)
        assert serializer.is_valid()
        assert serializer.validated_data["quantity"] == 3
-e 
# === File: ./test_cart.py ===
import pytest
from django.test import Client
from django.urls import reverse
from rest_framework import status
from apps.cart.models import Cart, CartItem


@pytest.fixture
def client():
    return Client()


@pytest.mark.django_db
class TestCartViewSet:
    def test_retrieve_empty_cart(self, client, user):
        client.force_login(user)
        response = client.get(reverse("cart-list"))
        assert response.status_code == status.HTTP_200_OK
        assert len(response.data) == 0

    def test_retrieve_full_cart(self, client, user, product):
        client.force_login(user)
        cart = Cart.objects.create(user=user)
        CartItem.objects.create(cart=cart, product=product, quantity=2)
        response = client.get(reverse("cart-list"))
        assert response.status_code == status.HTTP_200_OK
        assert len(response.data) == 1
        assert response.data[0]["quantity"] == 2

    def test_add_item(self, client, user, product):
        client.force_login(user)
        data = {"product_id": str(product.id), "quantity": 3}
        response = client.post(
            reverse("cart-add"), data, content_type="application/json"
        )
        assert response.status_code == status.HTTP_201_CREATED
        assert response.data["quantity"] == 3

    def test_add_item_insufficient_stock(self, client, user, product):
        client.force_login(user)
        data = {"product_id": str(product.id), "quantity": 6}
        response = client.post(
            reverse("cart-add"), data, content_type="application/json"
        )
        assert response.status_code == status.HTTP_400_BAD_REQUEST

    def test_update_item(self, client, user, product):
        client.force_login(user)
        cart = Cart.objects.create(user=user)
        item = CartItem.objects.create(cart=cart, product=product, quantity=2)
        data = {"quantity": 5}
        response = client.patch(
            reverse("cart-update-item", kwargs={"pk": str(item.id)}),
            data,
            content_type="application/json",
        )
        assert response.status_code == status.HTTP_200_OK
        assert response.data["quantity"] == 5

    def test_remove_item(self, client, user, product):
        client.force_login(user)
        cart = Cart.objects.create(user=user)
        item = CartItem.objects.create(cart=cart, product=product)
        response = client.delete(reverse("cart-remove", kwargs={"pk": str(item.id)}))
        assert response.status_code == status.HTTP_204_NO_CONTENT
        assert cart.items.count() == 0

    def test_anon_user_cart(self, client, product):
        data = {"product_id": str(product.id), "quantity": 3}
        response = client.post(
            reverse("cart-add"), data, content_type="application/json"
        )
        assert response.status_code == status.HTTP_201_CREATED
        assert response.data["quantity"] == 3
-e 
# === File: ./__init__.py ===
-e 
# === File: ./test_views.py ===
import pytest
from django.test import Client
from django.urls import reverse
from rest_framework import status
from apps.cart.models import Cart, CartItem


@pytest.fixture
def client():
    return Client()


@pytest.mark.django_db
class TestCartViewSet:
    def test_retrieve_empty_cart(self, client, user):
        client.force_login(user)
        response = client.get(reverse("cart-list"))
        assert response.status_code == status.HTTP_200_OK
        assert len(response.data) == 0

    def test_retrieve_full_cart(self, client, user, product):
        client.force_login(user)
        cart = Cart.objects.create(user=user)
        CartItem.objects.create(cart=cart, product=product, quantity=2)
        response = client.get(reverse("cart-list"))
        assert response.status_code == status.HTTP_200_OK
        assert len(response.data) == 1
        assert response.data[0]["quantity"] == 2

    def test_add_item(self, client, user, product):
        client.force_login(user)
        data = {"product_id": str(product.id), "quantity": 3}
        response = client.post(
            reverse("cart-add"), data, content_type="application/json"
        )
        assert response.status_code == status.HTTP_201_CREATED
        assert response.data["quantity"] == 3

    def test_add_item_insufficient_stock(self, client, user, product):
        client.force_login(user)
        data = {"product_id": str(product.id), "quantity": 6}
        response = client.post(
            reverse("cart-add"), data, content_type="application/json"
        )
        assert response.status_code == status.HTTP_400_BAD_REQUEST

    def test_update_item(self, client, user, product):
        client.force_login(user)
        cart = Cart.objects.create(user=user)
        item = CartItem.objects.create(cart=cart, product=product, quantity=2)
        data = {"quantity": 5}
        response = client.patch(
            reverse("cart-update-item", kwargs={"pk": str(item.id)}),
            data,
            content_type="application/json",
        )
        assert response.status_code == status.HTTP_200_OK
        assert response.data["quantity"] == 5

    def test_remove_item(self, client, user, product):
        client.force_login(user)
        cart = Cart.objects.create(user=user)
        item = CartItem.objects.create(cart=cart, product=product)
        response = client.delete(reverse("cart-remove", kwargs={"pk": str(item.id)}))
        assert response.status_code == status.HTTP_204_NO_CONTENT
        assert cart.items.count() == 0

    def test_anon_user_cart(self, client, product):
        data = {"product_id": str(product.id), "quantity": 3}
        response = client.post(
            reverse("cart-add"), data, content_type="application/json"
        )
        assert response.status_code == status.HTTP_201_CREATED
        assert response.data["quantity"] == 3
-e 
# === File: ./test_validators.py ===
import pytest
from django.core.exceptions import ValidationError
from apps.cart.validators import validate_stock


@pytest.mark.django_db
class TestValidators:
    def test_validate_stock_sufficient(self, product):
        validate_stock(product, 3)

    def test_validate_stock_insufficient(self, product):
        with pytest.raises(ValidationError, match="Недостаточно товара"):
            validate_stock(product, 6)

    def test_validate_stock_not_available(self, product):
        product.available_for_order = False
        product.save()
        with pytest.raises(ValidationError, match="недоступен для заказа"):
            validate_stock(product, 1)

    def test_validate_stock_product_none(self):
        with pytest.raises(ValidationError, match="Товар не существует"):
            validate_stock(None, 1)
-e 
# === File: ./test_cart_services.py ===
import pytest
from django.test import RequestFactory
from django.core.exceptions import ValidationError
from django.contrib.auth.middleware import AuthenticationMiddleware
from django.contrib.sessions.middleware import SessionMiddleware
from apps.cart.cart_services import CartService
from apps.cart.models import Cart, CartItem


@pytest.fixture
def anon_request():
    request = RequestFactory().get("/")
    middleware = SessionMiddleware(lambda x: None)
    middleware.process_request(request)
    request.session.save()

    # Добавляем AuthenticationMiddleware для избежания ошибок с request.user
    auth_middleware = AuthenticationMiddleware(lambda x: None)
    auth_middleware.process_request(request)

    return request


@pytest.fixture
def auth_request(user):
    request = RequestFactory().get("/")
    middleware = SessionMiddleware(lambda x: None)
    middleware.process_request(request)
    request.session.save()

    # Устанавливаем аутентифицированного пользователя
    request.user = user
    return request


@pytest.mark.django_db
class TestCartService:
    def test_get_or_create_cart_auth(self, auth_request, user):
        cart = CartService.get_or_create_cart(auth_request)
        assert cart.user == user
        assert cart.session_key is None

    def test_get_or_create_cart_anon(self, anon_request):
        cart = CartService.get_or_create_cart(anon_request)
        assert cart.user is None
        assert cart.session_key == anon_request.session.session_key

    def test_add_item_new(self, user, product):
        cart = Cart.objects.create(user=user)
        service = CartService(cart)
        item = service.add_item(str(product.id), 3)
        assert item.quantity == 3
        assert item.product == product
        assert cart.items.count() == 1

    def test_add_item_existing(self, user, product):
        cart = Cart.objects.create(user=user)
        CartItem.objects.create(cart=cart, product=product, quantity=2)
        service = CartService(cart)
        item = service.add_item(str(product.id), 3)
        assert item.quantity == 5
        assert cart.items.count() == 1

    def test_add_item_insufficient_stock(self, user, product):
        cart = Cart.objects.create(user=user)
        service = CartService(cart)
        with pytest.raises(ValidationError, match="Недостаточно товара"):
            service.add_item(str(product.id), 6)

    def test_update_item(self, user, product):
        cart = Cart.objects.create(user=user)
        item = CartItem.objects.create(cart=cart, product=product, quantity=2)
        service = CartService(cart)
        updated_item = service.update_item(str(item.id), 5)
        assert updated_item.quantity == 5

    def test_update_item_product_none(self, user):
        cart = Cart.objects.create(user=user)
        item = CartItem.objects.create(cart=cart, product=None)
        service = CartService(cart)
        with pytest.raises(ValidationError, match="Товар не существует"):
            service.update_item(str(item.id), 5)

    def test_remove_item(self, user, product):
        cart = Cart.objects.create(user=user)
        item = CartItem.objects.create(cart=cart, product=product)
        service = CartService(cart)
        service.remove_item(str(item.id))
        assert cart.items.count() == 0
