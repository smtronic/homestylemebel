File: /Users/smtronic/Projects/homestylemebel/apps/orders/migrations/0002_alter_order_cart.py
# Generated by Django 5.1.7 on 2025-04-01 15:13

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("cart", "0002_initial"),
        ("orders", "0001_initial"),
    ]

    operations = [
        migrations.AlterField(
            model_name="order",
            name="cart",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                to="cart.cart",
                verbose_name="Корзина",
            ),
        ),
    ]
File: /Users/smtronic/Projects/homestylemebel/apps/orders/migrations/0003_order_user.py
# Generated by Django 5.1.6 on 2025-06-03 09:29

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("orders", "0002_alter_order_cart"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AddField(
            model_name="order",
            name="user",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="orders",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Пользователь",
            ),
        ),
    ]
File: /Users/smtronic/Projects/homestylemebel/apps/orders/migrations/__init__.py
File: /Users/smtronic/Projects/homestylemebel/apps/orders/migrations/0001_initial.py
# Generated by Django 5.1.7 on 2025-03-31 17:13

import uuid

import django.core.validators
import django.db.models.deletion
import phonenumber_field.modelfields
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("cart", "0001_initial"),
        ("catalog", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Order",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("full_name", models.CharField(max_length=255, verbose_name="ФИО")),
                (
                    "phone",
                    phonenumber_field.modelfields.PhoneNumberField(
                        max_length=128, region="RU", verbose_name="Контактный номер"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, null=True, verbose_name="Email"
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("new", "Новый"),
                            ("processing", "В обработке"),
                            ("completed", "Завершён"),
                            ("cancelled", "Отменён"),
                        ],
                        default="new",
                        max_length=20,
                        verbose_name="Статус заказа",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="Создан"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="Обновлен"),
                ),
                (
                    "cart",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="cart.cart",
                        verbose_name="Корзина",
                    ),
                ),
            ],
            options={
                "verbose_name": "Заказ",
                "verbose_name_plural": "Заказы",
            },
        ),
        migrations.CreateModel(
            name="OrderItem",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "quantity",
                    models.PositiveIntegerField(
                        default=1,
                        validators=[django.core.validators.MinValueValidator(1)],
                        verbose_name="Количество",
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        verbose_name="Цена на момент заказа",
                    ),
                ),
                (
                    "order",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="items",
                        to="orders.order",
                    ),
                ),
                (
                    "product",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to="catalog.product",
                        verbose_name="Товар",
                    ),
                ),
            ],
            options={
                "verbose_name": "Товар в заказе",
                "verbose_name_plural": "Товары в заказе",
                "constraints": [
                    models.UniqueConstraint(
                        fields=("order", "product"), name="unique_product_in_order"
                    )
                ],
            },
        ),
    ]
File: /Users/smtronic/Projects/homestylemebel/apps/orders/models.py
from uuid import uuid4

from django.contrib.auth import get_user_model
from django.core.exceptions import ValidationError
from django.core.validators import MinValueValidator
from django.db import models
from phonenumber_field.modelfields import PhoneNumberField

from apps.cart.models import Cart
from apps.catalog.models import Product
from apps.orders.managers import OrderItemManager

User = get_user_model()


class Order(models.Model):
    """Заказ"""

    class Status(models.TextChoices):
        NEW = "new", "Новый"
        PROCESSING = "processing", "В обработке"
        COMPLETED = "completed", "Завершён"
        CANCELLED = "cancelled", "Отменён"

    id = models.UUIDField(primary_key=True, default=uuid4, editable=False)
    user = models.ForeignKey(  # <-- Новое поле
        User,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name="orders",
        verbose_name="Пользователь",
    )
    cart = models.OneToOneField(Cart, on_delete=models.CASCADE, verbose_name="Корзина")
    full_name = models.CharField(max_length=255, verbose_name="ФИО")
    phone = PhoneNumberField(region="RU", unique=False, verbose_name="Контактный номер")
    email = models.EmailField(null=True, blank=True, verbose_name="Email")
    status = models.CharField(
        max_length=20,
        choices=Status.choices,
        default=Status.NEW,
        verbose_name="Статус заказа",
    )
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="Создан")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="Обновлен")

    class Meta:
        verbose_name = "Заказ"
        verbose_name_plural = "Заказы"

    def __str__(self):
        return f"Заказ #{self.id} - {self.get_status_display()}"

    @property
    def total(self):
        """Общая стоимость заказа"""
        return sum(item.total_price for item in self.items.all())


class OrderItem(models.Model):
    """Товар в заказе"""

    id = models.UUIDField(primary_key=True, default=uuid4, editable=False)
    order = models.ForeignKey(Order, on_delete=models.CASCADE, related_name="items")
    product = models.ForeignKey(Product, on_delete=models.PROTECT, verbose_name="Товар")
    quantity = models.PositiveIntegerField(
        default=1,
        validators=[MinValueValidator(1)],
        verbose_name="Количество",
    )
    price = models.DecimalField(
        max_digits=10, decimal_places=2, verbose_name="Цена на момент заказа"
    )

    objects = OrderItemManager()

    class Meta:
        verbose_name = "Товар в заказе"
        verbose_name_plural = "Товары в заказе"
        constraints = [
            models.UniqueConstraint(
                fields=["order", "product"], name="unique_product_in_order"
            )
        ]

    def clean(self):
        """Проверки для товара в заказе"""
        if self.quantity > self.product.stock:
            raise ValidationError(
                f"Недостаточно товара '{self.product.name}' на складе. Остаток: {self.product.stock}."
            )
        if not self.price:
            self.price = self.product.actual_price

    @property
    def total_price(self):
        """Сумма по позиции с округлением"""
        return round(self.price * self.quantity, 2)

    def save(self, *args, **kwargs):
        self.clean()
        super().save(*args, **kwargs)

    def __str__(self):
        return f"{self.product.name} × {self.quantity}"
File: /Users/smtronic/Projects/homestylemebel/apps/orders/serializers.py
from rest_framework import serializers
from phonenumber_field.serializerfields import PhoneNumberField
from drf_spectacular.utils import extend_schema_field

from apps.orders.models import Order, OrderItem
from apps.catalog.models import Product
from apps.cart.models import Cart


class ProductInOrderSerializer(serializers.ModelSerializer):
    """Краткая информация о товаре в заказе"""

    class Meta:
        model = Product
        fields = ("id", "name", "sku", "price", "main_image", "slug")


class OrderItemSerializer(serializers.ModelSerializer):
    """Сериализатор позиции в заказе"""

    product = ProductInOrderSerializer(read_only=True)
    total_price = serializers.SerializerMethodField()

    class Meta:
        model = OrderItem
        fields = ("product", "quantity", "price", "total_price")

    @extend_schema_field({"type": "number", "format": "decimal"})
    def get_total_price(self, obj):
        return round(obj.quantity * obj.price, 2)


class OrderSerializer(serializers.ModelSerializer):
    """Сериализатор для получения заказа"""

    items = OrderItemSerializer(many=True, read_only=True)
    total = serializers.SerializerMethodField()

    class Meta:
        model = Order
        fields = (
            "id",
            "full_name",
            "email",
            "phone",
            "status",
            "created_at",
            "updated_at",
            "total",
            "items",
        )
        read_only_fields = (
            "status",
            "created_at",
            "updated_at",
            "total",
            "items",
        )

    @extend_schema_field({"type": "number", "format": "decimal"})
    def get_total(self, obj):
        return round(obj.total, 2)


class OrderCreateSerializer(serializers.Serializer):
    """Сериализатор для создания заказа"""

    full_name = serializers.CharField(max_length=255)
    phone = PhoneNumberField(region="RU")
    email = serializers.EmailField(required=False)

    def validate(self, data):
        """
        Проверка наличия корзины и её содержимого
        """
        request = self.context["request"]
        user = request.user if request.user.is_authenticated else None
        session_key = request.session.session_key

        cart = Cart.objects.filter(
            user=user if user else None, session_key=session_key if not user else None
        ).first()

        if not cart:
            raise serializers.ValidationError("Корзина не найдена.")

        if not cart.items.exists():
            raise serializers.ValidationError(
                "Нельзя оформить заказ с пустой корзиной."
            )

        return data


class OrderUpdateSerializer(serializers.ModelSerializer):
    phone = PhoneNumberField(region="RU")

    class Meta:
        model = Order
        fields = ["full_name", "phone", "email"]

    def validate(self, data):
        if self.instance.status in [Order.Status.COMPLETED, Order.Status.CANCELLED]:
            raise serializers.ValidationError(
                "Нельзя изменить завершённый или отменённый заказ."
            )
        return data
File: /Users/smtronic/Projects/homestylemebel/apps/orders/__init__.py
File: /Users/smtronic/Projects/homestylemebel/apps/orders/apps.py
from django.apps import AppConfig


class CartConfig(AppConfig):
    default_auto_field = "django.db.models.UUIDField"
    name = "apps.orders"
File: /Users/smtronic/Projects/homestylemebel/apps/orders/admin.py
from django.contrib import admin

from .models import Order, OrderItem


class OrderItemInline(admin.TabularInline):
    model = OrderItem
    extra = 1


@admin.register(Order)
class OrderAdmin(admin.ModelAdmin):
    list_display = ("id", "full_name", "phone", "status", "created_at", "updated_at")
    search_fields = ("full_name", "phone", "email")
    list_filter = (("status", admin.ChoicesFieldListFilter), "created_at")
    inlines = [OrderItemInline]


@admin.register(OrderItem)
class OrderItemAdmin(admin.ModelAdmin):
    list_display = ("order", "product", "quantity", "price", "total_price")
    search_fields = ("order__id", "product__name")
    list_filter = ("order__created_at",)

    def total_price(self, obj):
        return obj.total_price

    total_price.short_description = "Сумма по позиции"
File: /Users/smtronic/Projects/homestylemebel/apps/orders/urls.py
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from apps.orders.views import OrderViewSet

router = DefaultRouter()
router.register(r"", OrderViewSet, basename="orders")

urlpatterns = [
    path("", include(router.urls)),
]
File: /Users/smtronic/Projects/homestylemebel/apps/orders/services/order_services.py
from django.core.exceptions import ValidationError
from django.db import models, transaction

from apps.cart.models import Cart
from apps.catalog.models import Product
from apps.orders.models import Order, OrderItem


class OrderService:
    @staticmethod
    @transaction.atomic
    def create_order_from_cart(user=None, session_key=None, contact_data=None):
        """
        Создает заказ из корзины с валидацией и обработкой транзакции
        """
        cart = OrderService._get_valid_cart(user, session_key)
        order = Order.objects.create(
            user=user,
            cart=cart,
            full_name=contact_data["full_name"],
            phone=contact_data["phone"],
            email=contact_data.get("email"),
            status=Order.Status.NEW,
        )
        order_items = OrderItem.objects.bulk_create_from_cart(
            order, cart.items.select_related("product")
        )

        # Обновление склада
        for cart_item in cart.items.select_related("product"):
            Product.objects.filter(pk=cart_item.product.pk).update(
                stock=models.F("stock") - cart_item.quantity
            )
        cart.items.all().delete()

        return order

    @staticmethod
    def _get_valid_cart(user, session_key):
        """Валидация корзины перед созданием заказа"""
        if user:
            cart = Cart.objects.filter(user=user).first()
        else:
            cart = Cart.objects.filter(session_key=session_key).first()

        if not cart:
            raise ValidationError("Корзина не найдена")

        if not cart.items.exists():
            raise ValidationError("Нельзя оформить заказ с пустой корзиной")

        for item in cart.items.select_related("product"):
            if item.quantity > item.product.stock:
                raise ValidationError(
                    f"Недостаточно товара '{item.product.name}' на складе. "
                    f"Доступно: {item.product.stock}, запрошено: {item.quantity}"
                )

        return cart

    @staticmethod
    def cancel_order(order, reason=None):
        """Отмена заказа с возвратом товаров на склад"""
        if order.status == Order.Status.CANCELLED:
            raise ValidationError("Заказ уже отменен")

        if order.status == Order.Status.COMPLETED:
            raise ValidationError("Нельзя отменить завершенный заказ")

        with transaction.atomic():
            for item in order.items.select_related("product"):
                Product.objects.filter(pk=item.product.pk).update(
                    stock=models.F("stock") + item.quantity
                )
            order.status = Order.Status.CANCELLED
            if reason:
                order.notes = f"Причина отмены: {reason}"
            order.save()

        return order
File: /Users/smtronic/Projects/homestylemebel/apps/orders/views.py
from uuid import UUID

from rest_framework.decorators import action
from rest_framework import viewsets, status
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated, AllowAny
from drf_spectacular.utils import (
    extend_schema_view,
    extend_schema,
    OpenApiResponse,
    OpenApiParameter,
    OpenApiTypes,
)
from rest_framework.exceptions import ValidationError

from apps.orders.serializers import (
    OrderCreateSerializer,
    OrderSerializer,
    OrderUpdateSerializer,
)
from apps.orders.services.order_services import OrderService
from apps.orders.models import Order


@extend_schema_view(
    create=extend_schema(
        summary="Создать заказ",
        description="Создаёт заказ из текущей корзины. Доступно для всех пользователей. "
        "Для гостей требуется full_name, phone, email (опционально). "
        "Для аутентифицированных пользователей данные берутся из профиля, но могут быть переопределены.",
        request=OrderCreateSerializer,
        responses={
            201: OpenApiResponse(
                description="Заказ создан",
                response={
                    "type": "object",
                    "properties": {"id": {"type": "string", "format": "uuid"}},
                },
            ),
            400: OpenApiResponse(description="Неверные данные или пустая корзина"),
        },
    ),
    list=extend_schema(
        summary="Получить список заказов",
        description="Возвращает список заказов текущего аутентифицированного пользователя.",
        responses={
            200: OrderSerializer(many=True),
            401: OpenApiResponse(description="Пользователь не аутентифицирован"),
        },
    ),
    retrieve=extend_schema(
        summary="Получить детали заказа",
        description="Возвращает детали заказа по ID для аутентифицированного пользователя. "
        "Доступно только для заказов, принадлежащих пользователю.",
        responses={
            200: OrderSerializer,
            401: OpenApiResponse(description="Пользователь не аутентифицирован"),
            403: OpenApiResponse(description="Доступ запрещён"),
            404: OpenApiResponse(description="Заказ не найден"),
        },
    ),
    cancel=extend_schema(
        summary="Отменить заказ",
        description="Позволяет администратору отменить заказ. Статус должен быть 'new' или 'processing'.",
        request=None,
        responses={
            200: OpenApiResponse(description="Заказ успешно отменён"),
            400: OpenApiResponse(description="Нельзя отменить заказ"),
            403: OpenApiResponse(description="Нет прав"),
            404: OpenApiResponse(description="Заказ не найден"),
        },
    ),
    edit=extend_schema(
        summary="Обновить заказ",
        description="Позволяет изменить контактные данные заказа, если он ещё не завершён.",
        request=OrderUpdateSerializer,
        responses={
            200: OrderSerializer,
            400: OpenApiResponse(description="Неверные данные или заказ уже завершён"),
            403: OpenApiResponse(description="Нет доступа"),
            404: OpenApiResponse(description="Заказ не найден"),
        },
    ),
)
class OrderViewSet(viewsets.ViewSet):
    """ViewSet для работы с заказами"""

    queryset = Order.objects.all()
    serializer_class = OrderSerializer

    def get_permissions(self):
        """Разрешения для эндпоинтов"""
        if self.action in ["list", "retrieve", "cancel", "update"]:
            return [IsAuthenticated()]
        return [AllowAny()]

    def get_serializer_class(self):
        """Выбор сериализатора в зависимости от действия"""
        if self.action == "create":
            return OrderCreateSerializer
        return OrderSerializer

    def create(self, request):
        serializer = OrderCreateSerializer(
            data=request.data, context={"request": request}
        )
        serializer.is_valid(raise_exception=True)

        user = request.user if request.user.is_authenticated else None
        session_key = request.session.session_key
        contact_data = serializer.validated_data

        try:
            order = OrderService.create_order_from_cart(
                user=user, session_key=session_key, contact_data=contact_data
            )
            return Response({"id": str(order.id)}, status=status.HTTP_201_CREATED)
        except ValidationError as e:
            return Response({"detail": str(e)}, status=status.HTTP_400_BAD_REQUEST)

    def list(self, request):
        orders = Order.objects.filter(user=request.user).select_related("user")
        serializer = OrderSerializer(orders, many=True)
        return Response(serializer.data, status=status.HTTP_200_OK)

    def retrieve(self, request, pk=None):
        try:
            order = Order.objects.get(pk=pk, user=request.user)
            serializer = OrderSerializer(order)
            return Response(serializer.data, status=status.HTTP_200_OK)
        except Order.DoesNotExist:
            return Response(
                {"detail": "Заказ не найден или не принадлежит пользователю"},
                status=status.HTTP_404_NOT_FOUND,
            )

    @action(
        detail=True,
        methods=["post"],
        url_path="cancel",
        permission_classes=[IsAuthenticated],
    )
    def cancel(self, request, pk=None):
        if not request.user.is_staff:
            return Response(
                {"detail": "Только администратор может отменить заказ"}, status=403
            )

        try:
            order = Order.objects.get(pk=pk)
        except Order.DoesNotExist:
            return Response({"detail": "Заказ не найден"}, status=404)

        try:
            OrderService.cancel_order(order)
            return Response({"detail": "Заказ успешно отменён"}, status=200)
        except ValidationError as e:
            return Response({"detail": str(e)}, status=400)

    @action(
        detail=True,
        methods=["patch"],
        url_path="edit",
        permission_classes=[IsAuthenticated],
    )
    def edit(self, request, pk=None):
        try:
            order = Order.objects.get(pk=pk)
        except Order.DoesNotExist:
            return Response({"detail": "Заказ не найден"}, status=404)

        user = request.user
        if not (user.is_staff or order.user == user):
            return Response({"detail": "Нет доступа к заказу"}, status=403)

        serializer = OrderUpdateSerializer(order, data=request.data, partial=True)
        serializer.is_valid(raise_exception=True)
        serializer.save()
        return Response(OrderSerializer(order).data)
File: /Users/smtronic/Projects/homestylemebel/apps/orders/managers.py
from django.db import models


class OrderItemManager(models.Manager):
    def bulk_create_from_cart(self, order, cart_items):
        """Создание товаров заказа из корзины"""
        order_items = [
            self.model(
                order=order,
                product=cart_item.product,
                quantity=cart_item.quantity,
                price=cart_item.price,
            )
            for cart_item in cart_items
        ]
        self.bulk_create(order_items)
        return order_items
